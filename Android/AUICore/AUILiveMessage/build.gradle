apply plugin: 'com.android.library'

// Cannot make method static, @runchen.brc
String getEnvValue(key, defValue) {
    def val = System.getProperty(key)
    if (null != val) {
        return val
    }
    val = System.getenv(key)
    if (null != val) {
        return val
    }
    return defValue
}

// 定义BUILD IM TYPE，以决定使用哪种类型的IM方案，对应`AUIMessageServiceImplType`
//internal->内部IM
def BUILD_IM_TYPE_INTERNAL = "internal"
//rongcloud->融云IM
def BUILD_IM_TYPE_RONGCLOUD = "rongcloud"
//alivcim->ALIVC_IM
def BUILD_IM_TYPE_ALIVC_IM = "alivcim"

// 默认切换到Aliyun IM SDK v3.0
//ext.BUILD_IM_TYPE = getEnvValue("BUILD_IM_TYPE", BUILD_IM_TYPE_INTERNAL)
ext.BUILD_IM_TYPE = getEnvValue("BUILD_IM_TYPE", BUILD_IM_TYPE_ALIVC_IM)

android {
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }

    android {
        lintOptions {
            abortOnError false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api project(':AUIBaseKits:AUICommon')
    api project(':AUICore:AUIAppServer')

    // 切换消息SDK引擎
    if (BUILD_IM_TYPE_INTERNAL.equals(BUILD_IM_TYPE)) {
        implementation project(':AUIBaseKits:AUIMessage:AUIMessageImpl-Internal')
    } else if (BUILD_IM_TYPE_RONGCLOUD.equals(BUILD_IM_TYPE)) {
        implementation project(':AUIBaseKits:AUIMessage:AUIMessageImpl-RongCloud')
    } else {
        implementation project(':AUIBaseKits:AUIMessage:AUIMessageImpl-AliVCIM')
    }
}